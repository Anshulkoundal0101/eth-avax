// SPDX-License-Identifier: MIT
pragma solidity ^0.8.18;

contract HimachalPradeshMLAs {
    struct MLA {
        string name;
        string constituency;
        bool isActive;
    }

    mapping(uint => MLA) private mlas; // Mapping of MLA IDs to MLA structs
    uint private mlaCount; // Counter for MLA IDs
    address private owner; // Owner of the contract (admin)

    constructor() {
        owner = msg.sender;
    }

    modifier onlyOwner() {
        require(msg.sender == owner, "Only the owner can perform this action");
        _;
    }

    // Function to add a new MLA
    function addMLA(string memory _name, string memory _constituency) public onlyOwner {
        require(bytes(_name).length > 0, "MLA name must not be empty");
        require(bytes(_constituency).length > 0, "MLA constituency must not be empty");
        mlaCount++;
        mlas[mlaCount] = MLA(_name, _constituency, true);
    }

    // Function to get MLA details
    function getMLA(uint _id) public view returns (string memory, string memory, bool) {
        require(_id > 0 && _id <= mlaCount, "MLA ID does not exist");
        MLA memory mla = mlas[_id];
        return (mla.name, mla.constituency, mla.isActive);
    }

    // Function to update MLA constituency
    function updateConstituency(uint _id, string memory _newConstituency) public onlyOwner {
        require(_id > 0 && _id <= mlaCount, "MLA ID does not exist");
        require(bytes(_newConstituency).length > 0, "New constituency must not be empty");
        mlas[_id].constituency = _newConstituency;
    }

    // Function to deactivate an MLA
    function deactivateMLA(uint _id) public onlyOwner {
        require(_id > 0 && _id <= mlaCount, "MLA ID does not exist");
        mlas[_id].isActive = false;
    }

    // Function using assert to check a condition
    function testAssert(uint _id) public view {
        MLA memory mla = mlas[_id];
        // Using assert to ensure the MLA's name is always not empty
        assert(bytes(mla.name).length > 0);
    }

    // Function using require to check a condition
    function testRequire(uint _id) public view {
        // Using require to ensure the MLA ID exists
        require(_id > 0 && _id <= mlaCount, "MLA ID does not exist");
    }

    // Function using revert to check a condition
    function testRevert(uint _id) public view {
        // Using revert to check if the MLA ID does not exist
        if (_id == 0 || _id > mlaCount) {
            revert("MLA ID does not exist");
        }
    }
}
